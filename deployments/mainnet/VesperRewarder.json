{
  "address": "0x36F9e78Aa9012FF2Df8923074DE3fa52075EFDcb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterChefV2",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_vspToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OnRewardCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accVspPerShare",
          "type": "uint256"
        }
      ],
      "name": "PoolInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "RewardPerSecondUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChefV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_updateLpAmount",
          "type": "uint256"
        }
      ],
      "name": "onSushiReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accVspPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vspToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb66e604852be4687f9d6816d3a6e8fbd406db24f9962ec1c2f22f0e916fc4933",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0x36F9e78Aa9012FF2Df8923074DE3fa52075EFDcb",
    "transactionIndex": 104,
    "gasUsed": "1015290",
    "logsBloom": "0x
    "blockHash": "0x56f976d6de7f074411466988fbe3ffa07a9ffa54be852d7c1189115cc8b63ee9",
    "transactionHash": "0xb66e604852be4687f9d6816d3a6e8fbd406db24f9962ec1c2f22f0e916fc4933",
    "logs": [
      {
        "transactionIndex": 104,
        "blockNumber": 13622076,
        "transactionHash": "0xb66e604852be4687f9d6816d3a6e8fbd406db24f9962ec1c2f22f0e916fc4933",
        "address": "0x36F9e78Aa9012FF2Df8923074DE3fa52075EFDcb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001cbfae0367a9b1e4ac2c158e57b5f00ccb337271"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x56f976d6de7f074411466988fbe3ffa07a9ffa54be852d7c1189115cc8b63ee9"
      }
    ],
    "blockNumber": 13622076,
    "cumulativeGasUsed": "7601307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xef0881ec094552b2e128cf945ef17a6752b4ec5d",
    "0x1b40183efb4dd766f11bda7a7c3ad8982e998421",
    "13227513227513227",
    "0x132eEb05d5CB6829Bd34F552cDe0b6b708eF5014"
  ],
  "solcInputHash": "0629928d6b0fcc26c6e3c35252eb0de2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChefV2\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_vspToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OnRewardCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accVspPerShare\",\"type\":\"uint256\"}],\"name\":\"PoolInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardPerSecondUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updateLpAmount\",\"type\":\"uint256\"}],\"name\":\"onSushiReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accVspPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vspToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onSushiReward(uint256,address,address,uint256,uint256)\":{\"details\":\"Inherited from IRewarder\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(uint256,address,uint256)\":{\"details\":\"Inherited from IRewarder\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRewardPerSecond(uint256)\":{\"details\":\"Only owner can call this\"}},\"title\":\"Vesper's double incentive Sushi pool rewarder contract\",\"version\":1},\"userdoc\":{\"events\":{\"OnRewardCalled(address,uint256,uint256,address)\":{\"notice\":\"Emitted when `onSushiReward` function is called\"},\"PoolInfoUpdated(uint256,uint256,uint256)\":{\"notice\":\"Emitted when pool info is updated\"},\"RewardPerSecondUpdated(uint256)\":{\"notice\":\"Emitted when rewardPerSecond is updated\"}},\"kind\":\"user\",\"methods\":{\"onSushiReward(uint256,address,address,uint256,uint256)\":{\"notice\":\"Trigger function called by the MasterChefV2 contract that will send VSP rewards to the user\"},\"pendingToken(address)\":{\"notice\":\"Check pending rewards for a given user\"},\"pendingTokens(uint256,address,uint256)\":{\"notice\":\"Check pending rewards for a given user\"},\"updateRewardPerSecond(uint256)\":{\"notice\":\"Update the amount of VSP distribuited per second\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VesperRewarder.sol\":\"VesperRewarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/VesperRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\n/// @title Vesper's double incentive Sushi pool rewarder contract\\ncontract VesperRewarder is IRewarder, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 lpAmount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // This value is used as a snapshot of the amount of VSP entitled to the user in some point in time\\n        uint256 unpaidRewards; // The amount not payed due to low VSP balance\\n    }\\n\\n    struct PoolInfo {\\n        uint256 accVspPerShare; // Accumulated VSP per share, times 1e12\\n        uint256 lastRewardTime; // Last block number that VSP distribution occurs\\n    }\\n\\n    PoolInfo public poolInfo;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    IERC20 public immutable vspToken;\\n\\n    IERC20 public immutable lpToken;\\n\\n    address public immutable masterChefV2;\\n\\n    uint256 public rewardPerSecond;\\n\\n    /// @notice Emitted when `onSushiReward` function is called\\n    event OnRewardCalled(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\n    /// @notice Emitted when pool info is updated\\n    event PoolInfoUpdated(uint256 lastRewardTime, uint256 lpSupply, uint256 accVspPerShare);\\n\\n    /// @notice Emitted when rewardPerSecond is updated\\n    event RewardPerSecondUpdated(uint256 rewardPerSecond);\\n\\n    /**\\n     * @dev Throw when caller isn't the MasterChefV2 contract */\\n    modifier onlyMasterChefV2() {\\n        require(msg.sender == masterChefV2, \\\"caller-is-not-masterchef-v2\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws when pool id is not valid\\n     */\\n    modifier onlyIfValidPoolId(uint256 _pid) {\\n        require(IMasterChefV2(masterChefV2).lpToken(_pid) == lpToken, \\\"invalid-pid\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _masterChefV2,\\n        IERC20 _vspToken,\\n        uint256 _rewardPerSecond,\\n        IERC20 _lpToken\\n    ) {\\n        masterChefV2 = _masterChefV2;\\n        vspToken = _vspToken;\\n        rewardPerSecond = _rewardPerSecond;\\n        lpToken = _lpToken;\\n    }\\n\\n    /**\\n     * @notice Update reward variables\\n     */\\n    modifier updatePoolInfo() {\\n        if (block.timestamp > poolInfo.lastRewardTime) {\\n            uint256 _newAccVspPerShare = _updatedAccVspPerShare();\\n\\n            if (_newAccVspPerShare != poolInfo.accVspPerShare) {\\n                poolInfo.accVspPerShare = _newAccVspPerShare;\\n            }\\n\\n            poolInfo.lastRewardTime = block.timestamp;\\n            emit PoolInfoUpdated(poolInfo.lastRewardTime, lpToken.balanceOf(masterChefV2), poolInfo.accVspPerShare);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Trigger function called by the MasterChefV2 contract that will send VSP rewards to the user\\n     * @dev Inherited from IRewarder\\n     */\\n    function onSushiReward(\\n        uint256 _pid,\\n        address _user,\\n        address _recipient,\\n        uint256, /*sushiAmount*/\\n        uint256 _updateLpAmount\\n    ) external override onlyMasterChefV2 onlyIfValidPoolId(_pid) updatePoolInfo {\\n        UserInfo storage _userInfo = userInfo[_user];\\n\\n        uint256 _pending;\\n\\n        // Use current `lpAmount` to distribute pending rewards\\n        if (_userInfo.lpAmount > 0) {\\n            _pending = _calculatePendingReward(_user, poolInfo.accVspPerShare);\\n\\n            uint256 _balance = vspToken.balanceOf(address(this));\\n            if (_pending > _balance) {\\n                vspToken.safeTransfer(_recipient, _balance);\\n                _userInfo.unpaidRewards = _pending - _balance;\\n            } else {\\n                vspToken.safeTransfer(_recipient, _pending);\\n                _userInfo.unpaidRewards = 0;\\n            }\\n        }\\n\\n        // Save `_updateLpAmount` and use it to calculate `rewardDebt`\\n        _userInfo.lpAmount = _updateLpAmount;\\n        _userInfo.rewardDebt = (_updateLpAmount * poolInfo.accVspPerShare) / 1e18;\\n\\n        emit OnRewardCalled(_user, _pid, _pending - _userInfo.unpaidRewards, _recipient);\\n    }\\n\\n    /**\\n     * @notice Calculate the `accVspPerShare` value according to the current state (i.e. timestamp and total LP staked)\\n     * This value means how much of VSP we distribute for each SLP staked\\n     */\\n    function _updatedAccVspPerShare() private view returns (uint256 _accVspPerShare) {\\n        _accVspPerShare = poolInfo.accVspPerShare;\\n\\n        if (block.timestamp > poolInfo.lastRewardTime) {\\n            uint256 _lpSupply = lpToken.balanceOf(masterChefV2);\\n\\n            if (_lpSupply > 0) {\\n                uint256 _timeSinceLastReward = block.timestamp - poolInfo.lastRewardTime;\\n                uint256 _vspReward = _timeSinceLastReward * rewardPerSecond;\\n                _accVspPerShare += (_vspReward * 1e18) / _lpSupply;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate pending reward amount to distribute to a user\\n     * The pending reward is in essence the differente between the old and new `rewardDebt` values\\n     */\\n    function _calculatePendingReward(address _user, uint256 _accVspPerShare) private view returns (uint256 _pending) {\\n        UserInfo memory _userInfo = userInfo[_user];\\n        _pending = ((_userInfo.lpAmount * _accVspPerShare) / 1e18) - _userInfo.rewardDebt + _userInfo.unpaidRewards;\\n    }\\n\\n    /**\\n     * @notice Check pending rewards for a given user\\n     */\\n    function pendingToken(address _user) public view returns (uint256 _pending) {\\n        uint256 _accVspPerShare = _updatedAccVspPerShare();\\n        _pending = _calculatePendingReward(_user, _accVspPerShare);\\n    }\\n\\n    /**\\n     * @notice Check pending rewards for a given user\\n     * @dev Inherited from IRewarder\\n     */\\n    function pendingTokens(\\n        uint256, /*pid*/\\n        address user,\\n        uint256 /*sushiAmount*/\\n    ) external view override returns (IERC20[] memory _rewardTokens, uint256[] memory _rewardAmounts) {\\n        _rewardTokens = new IERC20[](1);\\n        _rewardTokens[0] = vspToken;\\n\\n        _rewardAmounts = new uint256[](1);\\n        _rewardAmounts[0] = pendingToken(user);\\n    }\\n\\n    /**\\n     * @notice Update the amount of VSP distribuited per second\\n     * @dev Only owner can call this\\n     */\\n    function updateRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n        rewardPerSecond = _rewardPerSecond;\\n        emit RewardPerSecondUpdated(_rewardPerSecond);\\n    }\\n}\\n\",\"keccak256\":\"0x0924cd33cee4d64c977e8cc6159d7b705e8576ad164ec07028345a6fd90ed593\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefV2 {\\n    function lpToken(uint256 pid) external view returns (IERC20 _lpToken);\\n}\\n\",\"keccak256\":\"0x1d174a368b10be70f0edddc74c0f113bb106c2df79e3d30eac79ea009825921f\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onSushiReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 sushiAmount,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 sushiAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x70ee3449fc4f2718ad2f6adba9f9fa49c9b7743e29e7921b9bb642064bae2ba4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516200122e3803806200122e833981016040819052610031916100b7565b61003a33610067565b6001600160601b0319606094851b811660c05292841b831660805260049190915590911b1660a052610123565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100cc578384fd5b84516100d78161010b565b60208601519094506100e88161010b565b6040860151606087015191945092506101008161010b565b939692955090935050565b6001600160a01b038116811461012057600080fd5b50565b60805160601c60a05160601c60c05160601c611085620001a96000396000818161020901528181610321015281816103bb015281816104de01526109bb015260008181610160015281816103910152818161052901526109e60152600081816101e20152818161061c015281816106ad015281816106f501526107f801526110856000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063cd00955411610066578063cd00955414610204578063cde10ca01461022b578063d63b3c491461023e578063f2fde38b1461025f57600080fd5b80638da5cb5b146101b55780638f10369a146101c6578063baa7f00e146101dd57600080fd5b80631959a002146100d45780634004c8e7146101235780635a2f3d09146101385780635fcbd2851461015b578063715018a61461019a5780638bf63742146101a2575b600080fd5b6101036100e2366004610d6f565b60036020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b610136610131366004610dc7565b610272565b005b600154600254610146919082565b6040805192835260208301919091520161011a565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161011a565b6101366102e0565b6101366101b0366004610df7565b610316565b6000546001600160a01b0316610182565b6101cf60045481565b60405190815260200161011a565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6101cf610239366004610d6f565b6107b3565b61025161024c366004610e48565b6107d1565b60405161011a929190610e9b565b61013661026d366004610d6f565b6108ac565b6000546001600160a01b031633146102a55760405162461bcd60e51b815260040161029c90610f51565b60405180910390fd5b60048190556040518181527f951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e987939060200160405180910390a150565b6000546001600160a01b0316331461030a5760405162461bcd60e51b815260040161029c90610f51565b6103146000610947565b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038e5760405162461bcd60e51b815260206004820152601b60248201527f63616c6c65722d69732d6e6f742d6d6173746572636865662d76320000000000604482015260640161029c565b847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378ed5d1f836040518263ffffffff1660e01b815260040161040791815260200190565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190610dab565b6001600160a01b03161461049b5760405162461bcd60e51b815260206004820152600b60248201526a1a5b9d985b1a590b5c1a5960aa1b604482015260640161029c565b6002544211156105c85760006104af610997565b60015490915081146104c15760018190555b4260028190556040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f8e7098c0ca09f70c40fa51981337305ee84c660e96f4e6848edc7a177dda2efc92917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610ddf565b6001546040805193845260208401929092529082015260600160405180910390a1505b6001600160a01b0385166000908152600360205260408120805490919015610726576105f987600160000154610abf565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610ddf565b9050808211156106e8576106d46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883610b3b565b6106de8183610fdd565b6002840155610724565b61071c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884610b3b565b600060028401555b505b838255600154670de0b6b3a7640000906107409086610fbe565b61074a9190610f9e565b8260010181905550856001600160a01b031688886001600160a01b03167fdc8defcf022366749bc8b0290ea678535b1b17d0c19d715d2a82b7ac337c6d528560020154856107989190610fdd565b60405190815260200160405180910390a45050505050505050565b6000806107be610997565b90506107ca8382610abf565b9392505050565b604080516001808252818301909252606091829190602080830190803683370190505091507f00000000000000000000000000000000000000000000000000000000000000008260008151811061083857634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050610877846107b3565b8160008151811061089857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050935093915050565b6000546001600160a01b031633146108d65760405162461bcd60e51b815260040161029c90610f51565b6001600160a01b03811661093b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029c565b61094481610947565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600154600254421115610abc576040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b158015610a2a57600080fd5b505afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190610ddf565b90508015610aba57600254600090610a7a9042610fdd565b9050600060045482610a8c9190610fbe565b905082610aa182670de0b6b3a7640000610fbe565b610aab9190610f9e565b610ab59085610f86565b935050505b505b90565b6001600160a01b03821660009081526003602090815260408083208151606081018352815480825260018301549482018590526002909201549281018390529290670de0b6b3a764000090610b15908790610fbe565b610b1f9190610f9e565b610b299190610fdd565b610b339190610f86565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b8d908490610b92565b505050565b6000610be7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c649092919063ffffffff16565b805190915015610b8d5780806020019051810190610c059190610d8b565b610b8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161029c565b6060610b33848460008585843b610cbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029c565b600080866001600160a01b03168587604051610cd99190610e7f565b60006040518083038185875af1925050503d8060008114610d16576040519150601f19603f3d011682016040523d82523d6000602084013e610d1b565b606091505b5091509150610d2b828286610d36565b979650505050505050565b60608315610d455750816107ca565b825115610d555782518084602001fd5b8160405162461bcd60e51b815260040161029c9190610f1e565b600060208284031215610d80578081fd5b81356107ca8161103a565b600060208284031215610d9c578081fd5b815180151581146107ca578182fd5b600060208284031215610dbc578081fd5b81516107ca8161103a565b600060208284031215610dd8578081fd5b5035919050565b600060208284031215610df0578081fd5b5051919050565b600080600080600060a08688031215610e0e578081fd5b853594506020860135610e208161103a565b93506040860135610e308161103a565b94979396509394606081013594506080013592915050565b600080600060608486031215610e5c578283fd5b833592506020840135610e6e8161103a565b929592945050506040919091013590565b60008251610e91818460208701610ff4565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015610edd5781516001600160a01b031684529284019290840190600101610eb8565b50505083810382850152845180825285830191830190845b81811015610f1157835183529284019291840191600101610ef5565b5090979650505050505050565b6020815260008251806020840152610f3d816040850160208701610ff4565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610f9957610f99611024565b500190565b600082610fb957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610fd857610fd8611024565b500290565b600082821015610fef57610fef611024565b500390565b60005b8381101561100f578181015183820152602001610ff7565b8381111561101e576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461094457600080fdfea2646970667358221220bab930c76b5bdac29c416274c26067215e0208db1ffd13e36ca5ee207ca2c99964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063cd00955411610066578063cd00955414610204578063cde10ca01461022b578063d63b3c491461023e578063f2fde38b1461025f57600080fd5b80638da5cb5b146101b55780638f10369a146101c6578063baa7f00e146101dd57600080fd5b80631959a002146100d45780634004c8e7146101235780635a2f3d09146101385780635fcbd2851461015b578063715018a61461019a5780638bf63742146101a2575b600080fd5b6101036100e2366004610d6f565b60036020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b610136610131366004610dc7565b610272565b005b600154600254610146919082565b6040805192835260208301919091520161011a565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161011a565b6101366102e0565b6101366101b0366004610df7565b610316565b6000546001600160a01b0316610182565b6101cf60045481565b60405190815260200161011a565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6101cf610239366004610d6f565b6107b3565b61025161024c366004610e48565b6107d1565b60405161011a929190610e9b565b61013661026d366004610d6f565b6108ac565b6000546001600160a01b031633146102a55760405162461bcd60e51b815260040161029c90610f51565b60405180910390fd5b60048190556040518181527f951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e987939060200160405180910390a150565b6000546001600160a01b0316331461030a5760405162461bcd60e51b815260040161029c90610f51565b6103146000610947565b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038e5760405162461bcd60e51b815260206004820152601b60248201527f63616c6c65722d69732d6e6f742d6d6173746572636865662d76320000000000604482015260640161029c565b847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378ed5d1f836040518263ffffffff1660e01b815260040161040791815260200190565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190610dab565b6001600160a01b03161461049b5760405162461bcd60e51b815260206004820152600b60248201526a1a5b9d985b1a590b5c1a5960aa1b604482015260640161029c565b6002544211156105c85760006104af610997565b60015490915081146104c15760018190555b4260028190556040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f8e7098c0ca09f70c40fa51981337305ee84c660e96f4e6848edc7a177dda2efc92917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610ddf565b6001546040805193845260208401929092529082015260600160405180910390a1505b6001600160a01b0385166000908152600360205260408120805490919015610726576105f987600160000154610abf565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610ddf565b9050808211156106e8576106d46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883610b3b565b6106de8183610fdd565b6002840155610724565b61071c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884610b3b565b600060028401555b505b838255600154670de0b6b3a7640000906107409086610fbe565b61074a9190610f9e565b8260010181905550856001600160a01b031688886001600160a01b03167fdc8defcf022366749bc8b0290ea678535b1b17d0c19d715d2a82b7ac337c6d528560020154856107989190610fdd565b60405190815260200160405180910390a45050505050505050565b6000806107be610997565b90506107ca8382610abf565b9392505050565b604080516001808252818301909252606091829190602080830190803683370190505091507f00000000000000000000000000000000000000000000000000000000000000008260008151811061083857634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050610877846107b3565b8160008151811061089857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050935093915050565b6000546001600160a01b031633146108d65760405162461bcd60e51b815260040161029c90610f51565b6001600160a01b03811661093b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029c565b61094481610947565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600154600254421115610abc576040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b158015610a2a57600080fd5b505afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190610ddf565b90508015610aba57600254600090610a7a9042610fdd565b9050600060045482610a8c9190610fbe565b905082610aa182670de0b6b3a7640000610fbe565b610aab9190610f9e565b610ab59085610f86565b935050505b505b90565b6001600160a01b03821660009081526003602090815260408083208151606081018352815480825260018301549482018590526002909201549281018390529290670de0b6b3a764000090610b15908790610fbe565b610b1f9190610f9e565b610b299190610fdd565b610b339190610f86565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b8d908490610b92565b505050565b6000610be7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c649092919063ffffffff16565b805190915015610b8d5780806020019051810190610c059190610d8b565b610b8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161029c565b6060610b33848460008585843b610cbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029c565b600080866001600160a01b03168587604051610cd99190610e7f565b60006040518083038185875af1925050503d8060008114610d16576040519150601f19603f3d011682016040523d82523d6000602084013e610d1b565b606091505b5091509150610d2b828286610d36565b979650505050505050565b60608315610d455750816107ca565b825115610d555782518084602001fd5b8160405162461bcd60e51b815260040161029c9190610f1e565b600060208284031215610d80578081fd5b81356107ca8161103a565b600060208284031215610d9c578081fd5b815180151581146107ca578182fd5b600060208284031215610dbc578081fd5b81516107ca8161103a565b600060208284031215610dd8578081fd5b5035919050565b600060208284031215610df0578081fd5b5051919050565b600080600080600060a08688031215610e0e578081fd5b853594506020860135610e208161103a565b93506040860135610e308161103a565b94979396509394606081013594506080013592915050565b600080600060608486031215610e5c578283fd5b833592506020840135610e6e8161103a565b929592945050506040919091013590565b60008251610e91818460208701610ff4565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015610edd5781516001600160a01b031684529284019290840190600101610eb8565b50505083810382850152845180825285830191830190845b81811015610f1157835183529284019291840191600101610ef5565b5090979650505050505050565b6020815260008251806020840152610f3d816040850160208701610ff4565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610f9957610f99611024565b500190565b600082610fb957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610fd857610fd8611024565b500290565b600082821015610fef57610fef611024565b500390565b60005b8381101561100f578181015183820152602001610ff7565b8381111561101e576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461094457600080fdfea2646970667358221220bab930c76b5bdac29c416274c26067215e0208db1ffd13e36ca5ee207ca2c99964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onSushiReward(uint256,address,address,uint256,uint256)": {
        "details": "Inherited from IRewarder"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(uint256,address,uint256)": {
        "details": "Inherited from IRewarder"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRewardPerSecond(uint256)": {
        "details": "Only owner can call this"
      }
    },
    "title": "Vesper's double incentive Sushi pool rewarder contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OnRewardCalled(address,uint256,uint256,address)": {
        "notice": "Emitted when `onSushiReward` function is called"
      },
      "PoolInfoUpdated(uint256,uint256,uint256)": {
        "notice": "Emitted when pool info is updated"
      },
      "RewardPerSecondUpdated(uint256)": {
        "notice": "Emitted when rewardPerSecond is updated"
      }
    },
    "kind": "user",
    "methods": {
      "onSushiReward(uint256,address,address,uint256,uint256)": {
        "notice": "Trigger function called by the MasterChefV2 contract that will send VSP rewards to the user"
      },
      "pendingToken(address)": {
        "notice": "Check pending rewards for a given user"
      },
      "pendingTokens(uint256,address,uint256)": {
        "notice": "Check pending rewards for a given user"
      },
      "updateRewardPerSecond(uint256)": {
        "notice": "Update the amount of VSP distribuited per second"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VesperRewarder.sol:VesperRewarder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 754,
        "contract": "contracts/VesperRewarder.sol:VesperRewarder",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)751_storage"
      },
      {
        "astId": 759,
        "contract": "contracts/VesperRewarder.sol:VesperRewarder",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)746_storage)"
      },
      {
        "astId": 769,
        "contract": "contracts/VesperRewarder.sol:VesperRewarder",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)746_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VesperRewarder.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)746_storage"
      },
      "t_struct(PoolInfo)751_storage": {
        "encoding": "inplace",
        "label": "struct VesperRewarder.PoolInfo",
        "members": [
          {
            "astId": 748,
            "contract": "contracts/VesperRewarder.sol:VesperRewarder",
            "label": "accVspPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 750,
            "contract": "contracts/VesperRewarder.sol:VesperRewarder",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)746_storage": {
        "encoding": "inplace",
        "label": "struct VesperRewarder.UserInfo",
        "members": [
          {
            "astId": 741,
            "contract": "contracts/VesperRewarder.sol:VesperRewarder",
            "label": "lpAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 743,
            "contract": "contracts/VesperRewarder.sol:VesperRewarder",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 745,
            "contract": "contracts/VesperRewarder.sol:VesperRewarder",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}